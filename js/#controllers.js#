/* global angular */

'use strict';

var myVersion = 7;
var key = {
			backspace: 8,
			enter: 13,
			escape: 27,
			left: 37,
			up: 38,
			right: 39,
			down: 40,
			comma: 188
		};
var OBJECT_STORE_CLIENTES = 'cliente';
var OBJECT_STORE_EVENTOS = 'evento';
var OBJECT_STORE_IMOVEIS = 'imovel';
var OBJECT_STORE_CONTRATOS = 'contrato';
var OBJECT_STORE_DOCUMENTOS = 'documento';
var OBJECT_STORE_TIPODOC = 'tipoDocumento';
//var imoveisDbControllers = angular.module('imoveisDbControllers', ['imoveisDbServices']);
var imoveisDbControllers = angular.module('imoveisDbControllers', ['ui.bootstrap', 'ngResource', 'ngAnimate', 'xc.indexedDB']);

imoveisDbControllers.config(function ($indexedDBProvider) {
	$indexedDBProvider
      .connection('imobapp-localdb')
      .upgradeDatabase(myVersion, function(event, db, tx){
      		if(!db.objectStoreNames.contains(OBJECT_STORE_TIPODOC)) {
      			var osTipoDocumentos = db.createObjectStore(OBJECT_STORE_TIPODOC, { keyPath: "tipo" });
      			osTipoDocumentos.createIndex("formato_idx", "tipo", { unique: false });
      		}
      		if(!db.objectStoreNames.contains(OBJECT_STORE_CONTRATOS)) {
			var osContratos = db.createObjectStore(OBJECT_STORE_CONTRATOS, { keyPath: "id", autoIncrement:true });
			osContratos.createIndex("cpfLocador_idx", "cpfLocador", { unique: false , multientry: true });
			osContratos.createIndex("cpfLocatario_idx", "cpfLocatario", { unique: false , multientry: true });
			osContratos.createIndex("idImovel_idx", "idImovel", { unique: false });
		}
      		if(!db.objectStoreNames.contains(OBJECT_STORE_IMOVEIS)) {
			var osImoveis = db.createObjectStore(OBJECT_STORE_IMOVEIS, { keyPath: "id", autoIncrement:true });
			osImoveis.createIndex("cpfLocador_idx", "cpfLocador", { unique: false});
			osImoveis.createIndex("cpfLocatario_idx", "cpfLocatario", { unique: false });
			osImoveis.createIndex("bairro_idx","bairro", 	{unique:false});
		}
		if(!db.objectStoreNames.contains(OBJECT_STORE_CLIENTES)) {
			var osLocatarios = db.createObjectStore(OBJECT_STORE_CLIENTES, { keyPath: "cpf"});
			//osLocatarios.createIndex("cpf_idx", "cpfCliente", { unique: false });	
			osLocatarios.createIndex("tipo_idx", "tipo", { unique: false, multientry: true });			
			osLocatarios.createIndex("doc_idx", "docs", { unique: false, multientry: true });
		}
		if(!db.objectStoreNames.contains(OBJECT_STORE_EVENTOS)) {
			var osEventos = db.createObjectStore(OBJECT_STORE_EVENTOS, { keyPath: "id", autoIncrement:true });
			osEventos.createIndex("idContrato_idx", "idContrato", { unique: false });
			osEventos.createIndex("tipoEvento_idx", "tipoEvento", { unique: false });
			osEventos.createIndex("acaoEvento_idx", "acaoEvento", { unique: false });
		}
      });
});

imoveisDbControllers.controller('HomeCtrl', ['$scope', '$indexedDB', 
		function($scope,  $indexedDB) {
			
	
	//init();
	
	/**
	* @type Contratos
	*/
	var contratosObjectStore = $indexedDB.objectStore(OBJECT_STORE_CONTRATOS);
	
	
	
  function buscaContratos() {
		contratosObjectStore.getAll().then(function(contratosList) {  
		//persistanceService.buscaImoveis().then(function(imoveisList) {
			$scope.listViewContratos = contratosList;
		});		
	}
	
	/**
	* @type Eventos
	*/
	var eventosObjectStore = $indexedDB.objectStore(OBJECT_STORE_EVENTOS);
	
    	function buscaEventos() {
		eventosObjectStore.getAll().then(function(eventosList) {  
		//persistanceService.buscaImoveis().then(function(imoveisList) {
			$scope.listViewEventos = eventosList;
		});		
	}	
	
	   
	function init() {
		/**
		* @type {ObjectStore} CLIENTES
		*/
		var ObjectStore = $indexedDB.objectStore(OBJECT_STORE_CLIENTES);
		ObjectStore.clear();
		ObjectStore
			.insert({	"cpf": "05171062722",
				"tipo": {"locador":true,"locatario":true,"dono":true,"fiador":true},
				"nome": "Leonardo Almeida Silva Ferreira",
				"email": "teste@teste.com",
				"telefones": {"celular": "21987662612","fixo": "2122058301"},
				"documentos":{	"1":{	"id":"1",
							"nome": "Archi User Guide PDF",
							"tipo": "PDF",
							"descricao": "Archi User Guide in PDF format (this is already included in the application download)", 
							"link": "http://www.archimatetool.com/downloads/latest/Archi%20User%20Guide.pdf",
							"versao": "1",
							"historico": {},
							"updated":new Date()},
						"2":{	"id":"2",
							"nome": "Archi User Guide eBook",
							"tipo": "PDF",
							"descricao": "Archi User Guide in ePub format", 
							"link": "http://www.archimatetool.com/downloads/latest/Archi%20User%20Guide.epub",
							"versao": "1",
							"historico": {},
							"updated":new Date()},
						"3":{	"id":"3",
							"nome": "Desenvolvimento de Softwares",
							"tipo": "PDF",
							"descricao": "Manual de Procedimentos para Desenvolvimento de Softwares", 
							"link": "http://www.sin.ufscar.br/manual-procedimento-desenvolvimento-software",
							"versao": "1",
							"historico": {},
							"updated":new Date()},
						"4":{	"id":"4",
							"nome": "Partitura Walpaper",
							"tipo": "IMG",
							"descricao": "Papel de parede no estilo de partitura", 
							"link": "http://files.partiturasearranjos1.webnode.com/200000058-b6a6cb79de/partitura-wallpaper-11944.jpg",
							"versao": "1",
							"historico": {},
							"updated":new Date()}},
				"enderecos": {"Principal":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"},"Adicional":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"}},
				"updated":new Date()});
		ObjectStore
			.insert({"cpf": "3140486819",
				"tipo": {"locador":true,"locatario":true,"dono":true,"fiador":true},
				"nome": "Thais de Moura Cardoso",
				"email": "teste@teste.com",
				"telefones": {"celular": "21984369758","fixo": "2122058301"}, 
				"documentos":{},
				"enderecos": {"Principal":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"},"Adicional":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"}},
				"updated":new Date()});
		ObjectStore
			.insert({"cpf": "49300008749",
				"tipo": {"locador":true,"locatario":true,"dono":true,"fiador":true},
				"nome": "Sandra Lucia dos Santos",
				"email": "teste@teste.com",
				"telefones": {"celular": "21988488175","fixo": "2122058301"}, 
				"documentos":{},
				"enderecos": {"Principal":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"},"Adicional":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"}},
				"updated":new Date()});
		ObjectStore
			.insert({"cpf": "12345678900",
				"tipo": {"locador":false,"locatario":false,"dono":true,"fiador":false},
				"nome": "Américo Guagliardi",
				"email": "teste@teste.com",
				"telefones": {"celular": "21988488175","fixo": "2122058301"}, 
				"documentos":{},
				"enderecos": {"Principal":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"},"Adicional":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"}},
				"updated":new Date()});
		ObjectStore
			.insert({"cpf": "23456789100",
				"tipo": {"locador":false,"locatario":false,"dono":true,"fiador":false},
				"nome": "Alone Maria dos Santos Almeida",
				"email": "teste@teste.com",
				"telefones": {"celular": "21988488175","fixo": "2122058301"}, 
				"documentos":{},
				"enderecos": {"Principal":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"},"Adicional":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"}},
				"updated":new Date()});
		ObjectStore
			.insert({"cpf": "34567891200",
				"tipo": {"locador":false,"locatario":false,"dono":false,"fiador":true},
				"nome": "José Amorim",
				"email": "teste@teste.com",
				"telefones": {"celular": "21988488175","fixo": "2122058301"}, 
				"documentos":{},
				"enderecos": {"Principal":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"},"Adicional":{"tipoimovel": "casa",
						"tipo":"Rua",
						"rua": "Buarque de Macedo", 
						"numero": 32,
						"complemento": "202",
						"bairro": "Flamengo",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"}},
				"updated":new Date()});
		
		       		
		/**
		* @type {ObjectStore} IMOVEIS
		*/
		
		ObjectStore = $indexedDB.objectStore(OBJECT_STORE_IMOVEIS);
		ObjectStore.clear();		
		
		ObjectStore
			.insert({"proprietarios": {"Principal":"05171062722", "Adicional":"31404860819"},
				"tipoimovel": "Apartamento",
				"endereco":{"tipo": "Rua",
						"rua": "Almirante Baltazar", 
						"numero": 194,
						"complemento": "apt 1105 bl 1",
						"bairro": "São Cristóvão",
						"cidade": "Rio de Janeiro",
						"estado": "RJ",
						"pais": "Brasil"},
				"status": "Alugado",
				"documentos":{	"1":{	"id":"1",
							"nome": "Archi User Guide PDF",
							"tipo": "PDF",
							"descricao": "Archi User Guide in PDF format (this is already included in the application download)", 
							"link": "http://www.archimatetool.com/downloads/latest/Archi%20User%20Guide.pdf",
							"versao": "1",
							"historico": {},
							"updated":new Date()},
						"2":{	"id":"2",
							"nome": "Archi User Guide eBook",
							"tipo": "PDF",
							"descricao": "Archi User Guide in ePub format", 
							"link": "http://www.archimatetool.com/downloads/latest/Archi%20User%20Guide.epub",
							"versao": "1",
							"historico": {},
							"updated":new Date()},
						"3":{	"id":"3",
							"nome": "Desenvolvimento de Softwares",
							"tipo": "PDF",
							"descricao": "Manual de Procedimentos para Desenvolvimento de Softwares", 
							"link": "http://www.sin.ufscar.br/manual-procedimento-desenvolvimento-software",
							"versao": "1",
							"historico": {},
							"updated":new Date()},
						"4":{	"id":"4",
							"nome": "Partitura Walpaper",
							"tipo": "IMG",
							"descricao": "Papel de parede no estilo de partitura", 
							"link": "http://files.partiturasearranjos1.webnode.com/200000058-b6a6cb79de/partitura-wallpaper-11944.jpg",
							"versao": "1",
							"historico": {},
							"updated":new Date()}},
				"vencimento": new Date()+10,				
				"updated":new Date()});
		
		/**
		* @type {ObjectStore} CONTRATOS
		*/
		
		ObjectStore = $indexedDB.objectStore(OBJECT_STORE_CONTRATOS);
		ObjectStore.clear();
		
		ObjectStore
			.insert({	"imovel": "1",
				"locador": {"Principal":"05171062722", "Adicional":"49300008749"},
				"locatario": {"Principal":"12345678900","Adicional":"23456789100"},								
				"status": "Ativo",
				"vencimento": new Date()+10,				
				"updated":new Date()});
		
		/**
		* @type {ObjectStore} ATIVIDADES/EVENTOS
		*/
		
		ObjectStore = $indexedDB.objectStore(OBJECT_STORE_EVENTOS);
		ObjectStore.clear();
		
		ObjectStore
			.insert({	"contrato": "1",
				"tipo": "BOLETO",
				"descricao": "Envio de boleto de cobrança ao locatario", 
				"title": "Emitir boleto e envio por email",
				"status": "Ativo",
				"start": new Date()+10,
				"end": new Date()+10,					
				"updated":new Date()});
		ObjectStore
			.insert({	"contrato": "1",
				"tipo": "CONTRATO",
				"descricao": "Assinatura de contrato pelo locador", 
				"title": "Enviar contrato para assinatura do locador",
				"status": "Ativo",
				"start": new Date()+10,
				"end": new Date()+10,				
				"updated":new Date()});
		ObjectStore
			.insert({	"contrato": "1",
				"tipo": "RENOVACAO",
				"descricao": "Contrato próximo da data de expiração.", 
				"title": "Enviar renovação para locador e locatário",
				"status": "Ativo",
				"start": new Date()+10,
				"end": new Date()+10,					
				"updated":new Date()});
			
		ObjectStore
			.insert({	"contrato": "1",
				"tipo": "",
				"descricao": "Contrato próximo da data de expiração.", 
				"title": "Enviar renovação para locador e locatário",
				"status": "Fechado",
				"start": new Date()+10,
				"end": new Date()+10,					
				"updated":new Date()});
			
		/**
		* @type {ObjectStore} TIPOS DE DOCUMENTOS
		*/
		
		ObjectStore = $indexedDB.objectStore(OBJECT_STORE_TIPODOC);
		ObjectStore.clear();		
		
		ObjectStore
			.insert({	
				tipo: 'PDF',
				icon: "fa-file-pdf-o"
			    });
		ObjectStore 
			.insert({
				tipo: 'TXT',
				icon: "fa-file-text-o"
			    });
		ObjectStore 
			.insert({
				tipo: 'Excel',
				icon: "fa-file-excel-o"				
			    });
		ObjectStore 
			.insert({
				tipo: 'CSV',
				icon: "fa-file-excel-o"
			    });
		ObjectStore 
			.insert({
				tipo: 'Vídeo',
				icon: "fa-file-video-o"				
			    });
		ObjectStore 
			.insert({
				tipo: 'IMG',
				icon: "fa-file-image-o"				
			    });
		ObjectStore 
			.insert({
				tipo: 'SOM',
				icon: "fa-file-sound-o"				
			    });
		ObjectStore 
			.insert({
				tipo: 'DOC',
				icon: "fa-file-word-o"				                                                              
			    });
	
	}
	
	if($indexedDB.onDatabaseError) {
		$location.path('/unsupported');
	} else {
		buscaContratos();
		buscaEventos();
	}
			
}]);

imoveisDbControllers.controller('ClientesCtrl', ['$scope', '$indexedDB', 
		function($scope,  $indexedDB) {
	
	$scope.objects = [];
	$scope.entidade = "Clientes";
	$scope.formatosSelecionados = [];	
	 	
	var documentosObjectStore = $indexedDB.objectStore(OBJECT_STORE_TIPODOC);
	documentosObjectStore.getAll().then(function(typeList) { 
		$scope.tipoDocList = typeList;
	});
	
	
	//init();
	
	/**
	* @type {ObjectStore}
	*/
	var clientesObjectStore = $indexedDB.objectStore(OBJECT_STORE_CLIENTES);
	
	
	
    	function buscaClientes() {
		clientesObjectStore.getAll().then(function(clientesList) {  
		//persistanceService.buscaImoveis().then(function(imoveisList) {
			$scope.listView = clientesList;
		});		
	}
	
	$scope.setSelectedDocTypes = function () {
		var tipo = this.tipoDoc.tipo;
		if (_.contains($scope.formatosSelecionados, tipo)) {
		    $scope.formatosSelecionados = _.without($scope.formatosSelecionados, tipo);
		} else {
		    $scope.formatosSelecionados.push(tipo);
		}
		return false;
	};
	
	$scope.isChecked = function (id) {
		if (_.contains($scope.formatosSelecionados, id)) {
		    return 'fa fa-check pull-right';
		}
		return false;
	};
	
	$scope.checkAll = function () {
		$scope.formatosSelecionados = _.pluck($scope.tipoDocList, 'tipo');
	};
	
	$scope.setMaster = function(section) {
	    $scope.selected = section;
	};
	
	$scope.isSelected = function(section) {
	    return $scope.selected === section;
	};
		
	
	$scope.removeCliente = function(key) {
		clientesObjectStore.delete(key).then(function() {			
			buscaLocadores();
		});
	};
	
	if($indexedDB.onDatabaseError) {
		$location.path('/unsupported');
	} else {
		buscaClientes();
	}

}]);

imoveisDbControllers.controller('ClientesEditCtrl', ['$scope', '$log', '$rootScope', '$routeParams', '$location',  '$indexedDB',  
		function($scope, $log, $rootScope, $routeParams, $location, $indexedDB) {
		
	if ($rootScope == "view") {$scope.entidade = "Alterar cliente";}
	else {$scope.entidade = "Incluir cliente";}
	/**
	* @type {ObjectStore}
	*/
	
	$scope.novocliente = {};
	$scope.novocliente.tipoCliente = [{titulo:"Proprietário", situacao:false, tipo:"proprietario"}, {titulo:"Locatário", situacao:false, tipo:"locatario"}, {titulo:"Fiador", situacao:false, tipo:"fiador"}];
	
	
	$scope.endereco = {};
	$scope.endereco.tpEndereco = "Residencial";	
	$scope.telefone = {};
	$scope.telefone.tpTelefone = "Residencial";
	$scope.documentos = [];
	$scope.novocliente.enderecos = [];	
	$scope.novocliente.telefones = [];	
	$scope.novocliente.documentos = [];
		
	var clientesObjectStore = $indexedDB.objectStore(OBJECT_STORE_CLIENTES);
	
	$scope.incluirEndereco = function(){
      $scope.novocliente.enderecos.push($scope.endereco);
      $scope.endereco = {};
      $scope.endereco.tpEndereco = "Residencial";
	};

	$scope.removeEndereco = function(index){
		  $scope.novocliente.enderecos.splice(index, 1);		
	};
	
	$scope.incluirTelefone = function(){
	    //if (tapButton !== key.enter) return;
	   
	    if ($scope.telefone.nrTelefone !== ''){
          $scope.novocliente.telefones.push($scope.telefone);
          $scope.telefone = {};
          $scope.telefone.tpTelefone = "Residencial";
      }
	};
	
	$scope.removeTelefone = function(index){
	    $scope.novocliente.telefones.splice(index, 1);
	};
	
	$scope.cancel = function() {
			
	};
	
	$scope.submit = function() {
      //if($scope.cpf == "") $scope.cpf = 1;
      //alert($scope.myForm.serializeArray());
      
      $scope.novocliente.updated = new Date();
            
      //alert($scope.novocliente.tipoCliente);
      //alert(JSON.stringify($scope.novocliente));
      
      clientesObjectStore
      .upsert($scope.novocliente)
      .then(function(e){
          $log.info('Cliente' + $scope.novocliente.nome + 'included with CPF:'+  $scope.novocliente.cpf +  ' at:' + new Date());
          $location.path('/cadastro/cliente').replace();
      });
		
	};
	
	function buscaInfo(key) {
		
		if(key) {
			var myQuery = $indexedDB.queryBuilder().$eq(key).$asc().compile();
			clientesObjectStore.each(
				function(cliente){
					$scope.cpf = cliente.value.cpf;
					//if (_.contains(cliente.value.tipo,"Locador")) {$scope.locador.active}
					$scope.locatario = _.contains(cliente.value.tipo,"Locatario");
					$scope.dono = _.contains(cliente.value.tipo,"Dono");
					$scope.fiador = _.contains(cliente.value.tipo,"Fiador");
					$scope.nome = cliente.value.nome;
					$scope.email = cliente.value.email;
					//$scope.telefones = _.(cliente.value.telefones))
					$scope.enderecos = cliente.value.enderecos;
					//$scope.locadorSelected=true;
					//$location.path('#/locadores/edit/'+key);
				}
			,myQuery);
		}
	}
		
	
	
	if($indexedDB.onDatabaseError) {
		$location.path('/unsupported');
	} else {
		buscaInfo($routeParams.id);
	}
	
}]);

imoveisDbControllers.controller('ImoveisCtrl', ['$scope', '$indexedDB',
		function($scope,  $indexedDB) {

	
	$scope.objects = [];
	$scope.entidade = "Imóveis";
	$scope.formatosSelecionados = [];
	
	var documentosObjectStore = $indexedDB.objectStore(OBJECT_STORE_TIPODOC);
	documentosObjectStore.getAll().then(function(typeList) { 
		$scope.tipoDocList = typeList;
	});
	
	
	/**
	* @type {ObjectStore}
	*/
	var imoveisObjectStore = $indexedDB.objectStore(OBJECT_STORE_IMOVEIS);
	
	
	
  function buscaImoveis() {
		imoveisObjectStore.getAll().then(function(imoveisList) {  
		//persistanceService.buscaImoveis().then(function(imoveisList) {
			$scope.listView = imoveisList;
		});		
	}	
	
	$scope.setSelectedDocTypes = function () {
		var tipo = this.tipoDoc.tipo;
		if (_.contains($scope.formatosSelecionados, tipo)) {
		    $scope.formatosSelecionados = _.without($scope.formatosSelecionados, tipo);
		} else {
		    $scope.formatosSelecionados.push(tipo);
		}
		return false;
	};
	
	$scope.isChecked = function (id) {
		if (_.contains($scope.formatosSelecionados, id)) {
		    return 'fa fa-check pull-right';
		}
		return false;
	};
	
	$scope.checkAll = function () {
		$scope.formatosSelecionados = _.pluck($scope.tipoDocList, 'tipo');
	};
	
	  
	$scope.setMaster = function(section) {
	    $scope.selected = section;
	};
	
	$scope.isSelected = function(section) {
	    return $scope.selected === section;
	};
		
	
	$scope.removeImovel = function(key) {
		imoveisObjectStore.delete(key).then(function() {			
			buscaImoveis();
		});
	};
	
	if($indexedDB.onDatabaseError) {
		$location.path('/unsupported');
	} else {
		buscaImoveis();
	}

			
}]);


imoveisDbControllers.controller('ImoveisEditCtrl', ['$scope', '$log', '$rootScope', '$routeParams', '$location',  '$indexedDB', '$filter',
    function($scope, $log, $rootScope, $routeParams, $location, $indexedDB, $filter) {
      
    if ($rootScope == "view") {$scope.entidade = "Alterar imóvel";}
    else {$scope.entidade = "Incluir imóvel";}
    /**
    * @type {ObjectStore}
    */
    var clientesObjectStore = $indexedDB.objectStore(OBJECT_STORE_CLIENTES);    
    var imoveisObjectStore = $indexedDB.objectStore(OBJECT_STORE_IMOVEIS);
    
    $scope.novoimovel = {};
    $scope.novoimovel.proprietarios = [];
    $scope.novoimovel.documentos = [];
    $scope.itemsList = [];
    $scope.proprietario = {};
    $scope.proprietario.tipo = 'principal';
    
    $scope.tipoImovel = [ "casa","apartamento", "kitnet", "ponto comercial"];    
    $scope.tiposSituacao = ["aliberar","liberado","indisponivel"];
    $scope.tiposProprietario = ["principal","adicional"];
    
    
    $scope.today= function() {
        $scope.dt = new Date();
    };
    
    $scope.today();
    
    $scope.incluirProprietario = function(){
        if ($scope.proprietario.identificador !== ''){
            $scope.novoimovel.proprietarios.push($scope.proprietario);
            $scope.proprietario = {};
            $scope.proprietario.tipo = 'principal';
        }
    };
    
    $scope.removeProprietario = function(index){
        $scope.novoimovel.proprietarios.splice(index, 1);
    };
    
    function buscarClientes(){
          clientesObjectStore.getAll().then(function(itemsList) {
            $scope.itemsList = itemsList;
          });
    }
      
    $scope.cancel = function() {
        
    };
  
    $scope.submit = function() {
        
        $scope.novoimovel.updated = $filter('dateFormat')(new Date(),false);
        
       
        //alert($filter('json')($scope.novoimovel));
        
        imoveisObjectStore
          .upsert($scope.novoimovel)
              .then(function(e){
                   $log.info('Evento' + $scope.novoimovel.id + 'incluído em:'+  $scope.novoimovel.updated +  ' at:' + new Date());
                   $location.path('/cadastro/imoveis').replace();
        });
      
    };
	
	
    function buscaInfo(key) {
      
      if(key) {
        var myQuery = $indexedDB.queryBuilder().$eq(key).$asc().compile();
        clientesObjectStore.each(
          function(cliente){
            $scope.cpf = cliente.value.cpf;
            //if (_.contains(cliente.value.tipo,"Eventos")) $scope.locador.active
            $scope.locatario = _.contains(cliente.value.tipo,"Locatario");
            $scope.dono = _.contains(cliente.value.tipo,"Dono");
            $scope.fiador = _.contains(cliente.value.tipo,"Fiador");
            $scope.nome = cliente.value.nome;
            $scope.email = cliente.value.email;
            //$scope.telefones = _.(cliente.value.telefones))
            $scope.enderecos = cliente.value.enderecos;
            //$scope.locadorSelected=true;
            //$location.path('#/locadores/edit/'+key);
          }
        ,myQuery);
      }
    }
    
  
  
    if($indexedDB.onDatabaseError) {
      $location.path('/unsupported');
    } else {
      buscaInfo($routeParams.id);
      buscarClientes();
    }
			
}]);

imoveisDbControllers.controller('ContratosCtrl', ['$scope', '$indexedDB',
		function($scope,  $indexedDB) {

	
	$scope.objects = [];
	$scope.entidade = "Contratos";
	$scope.formatosSelecionados = [];
	
	var documentosObjectStore = $indexedDB.objectStore(OBJECT_STORE_TIPODOC);
	documentosObjectStore.getAll().then(function(typeList) { 
		$scope.tipoDocList = typeList;
	});
	
	
	/**
	* @type {ObjectStore}
	*/
	var contratosObjectStore = $indexedDB.objectStore(OBJECT_STORE_CONTRATOS);
	
	
	
  function buscaContratos() {
		contratosObjectStore.getAll().then(function(contratosList) {  
		//persistanceService.buscaImoveis().then(function(imoveisList) {
			$scope.listView = contratosList;
		});		
	}
	
	$scope.setSelectedDocTypes = function () {
		var tipo = this.tipoDoc.tipo;
		if (_.contains($scope.formatosSelecionados, tipo)) {
		    $scope.formatosSelecionados = _.without($scope.formatosSelecionados, tipo);
		} else {
		    $scope.formatosSelecionados.push(tipo);
		}
		return false;
	};
	
	$scope.isChecked = function (id) {
		if (_.contains($scope.formatosSelecionados, id)) {
		    return 'fa fa-check pull-right';
		}
		return false;
	};
	
	$scope.checkAll = function () {
		$scope.formatosSelecionados = _.pluck($scope.tipoDocList, 'tipo');
	};
	
	  
	$scope.setMaster = function(section) {
	    $scope.selected = section;
	};
	
	$scope.isSelected = function(section) {
	    return $scope.selected === section;
	};
		
	
	$scope.removeContrato = function(key) {
		contratosObjectStore.delete(key).then(function() {			
			buscaContratos();
		});
	};
	
	if($indexedDB.onDatabaseError) {
		$location.path('/unsupported');
	} else {
		buscaContratos();
	}

			
}]);

imoveisDbControllers.controller('ContratosEditCtrl', ['$scope', '$log', '$rootScope', '$routeParams', '$location',  '$indexedDB', '$filter',
    function($scope, $log, $rootScope, $routeParams, $location, $indexedDB, $filter) {
      
    if ($rootScope == "view") {$scope.entidade = "Alterar Contrato";}
    else {$scope.entidade = "Incluir Contrato";}
    /**
    * @type {ObjectStore}
    */
    var contratosObjectStore = $indexedDB.objectStore(OBJECT_STORE_CONTRATOS);    
    var clientesObjectStore = $indexedDB.objectStore(OBJECT_STORE_CLIENTES);    
    var imoveisObjectStore = $indexedDB.objectStore(OBJECT_STORE_IMOVEIS);
    
    $scope.novocontrato = {};
    $scope.locatario = {};
    $scope.fiador = {};
    $scope.imovel = {};
    $scope.novocontrato.imovel = {};
    $scope.novocontrato.locatarios = [];
    $scope.novocontrato.fiadores = [];
    
    //$scope.relacao = {};
    $scope.tiposContrato = [ "locacao","venda","administracao"];
    $scope.tiposSituacao = ["ativo","avencer","vencido","finalizado"];
    $scope.novocontrato.situacao = "ativo";
    
    $scope.today= function() {
        $scope.dt = new Date();
    };
    
    $scope.today();
    
    $scope.clear = function () {
        $scope.dt = null;
    };

    $scope.dateOptions = {
        formatDay: 'dd',
        formatMonth: 'MM',
        formatYear: 'yyyy',
        startingDay: 1
    };
    
    $scope.incluirLocatario = function(){
        if ($scope.locatario !== ''){
            $scope.novocontrato.locatarios.push($scope.listviewcliente[index]);
            $scope.locatario = {};
        }
    };
    
    $scope.removeLocatario = function(index){
        $scope.novocontrato.locatarios.splice(index, 1);
    };
        
    $scope.incluirFiador = function(){
        if ($scope.fiador !== ''){
            $scope.novocontrato.fiadores.push($scope.fiador);
            $scope.fiador = {};
        }
    };
    
    $scope.removeFiador = function(index){
        $scope.novocontrato.fiadores.splice(index, 1);
    };
    
    function buscarClientes(){    
        clientesObjectStore.getAll().then(function(itemsList) {
            $scope.clientesList = itemsList;
        });
    }
    
    function buscarImoveis(){
         imoveisObjectStore.getAll().then(function(itemsList) {
            $scope.imoveisList = itemsList;
         });		
    }
    
    $scope.cancel = function() {
        
    };
  
    $scope.submit = function() {
        
        $scope.novocontrato.updated = new Date();
        
        $scope.novocontrato.situacao = "pendente";       
        
        $scope.novocontrato.dataInicio = $filter('dateFormat')($scope.novocontrato.updated, true);
        $scope.novocontrato.dataVencimento = $filter('dateFormat')($scope.picker, true);
        
        $scope.novocontrato.locadores = $scope.imovel.proprietarios;
        $scope.novocontrato.imovel = $scope.imovel.id;        
        
        alert($filter('json')($scope.novocontrato));
        
        contratosObjectStore
          .upsert($scope.novocontrato)
              .then(function(e){
                   $log.info('Evento' + $scope.novocontrato.id + 'incluído com vencimento em:'+  $scope.novocontrato.dataVencimento +  ' at:' + new Date());
                   $location.path('/cadastro/contratos').replace();
        });
      
    };
	
    function buscaInfo(key) {
      
      if(key) {
        var myQuery = $indexedDB.queryBuilder().$eq(key).$asc().compile();
        clientesObjectStore.each(
          function(cliente){
            $scope.cpf = cliente.value.cpf;
            //if (_.contains(cliente.value.tipo,"Eventos")) $scope.locador.active
            $scope.locatario = _.contains(cliente.value.tipo,"Locatario");
            $scope.dono = _.contains(cliente.value.tipo,"Dono");
            $scope.fiador = _.contains(cliente.value.tipo,"Fiador");
            $scope.nome = cliente.value.nome;
            $scope.email = cliente.value.email;
            //$scope.telefones = _.(cliente.value.telefones))
            $scope.enderecos = cliente.value.enderecos;
            //$scope.locadorSelected=true;
            //$location.path('#/locadores/edit/'+key);
          }
        ,myQuery);
      }
    }
    
    if($indexedDB.onDatabaseError) {
      $location.path('/unsupported');
    } else {
      //buscaInfo($routeParams.id);
      buscarClientes();
      buscarImoveis();
    }
			
}]);

imoveisDbControllers.controller('EventosCtrl', ['$scope', '$indexedDB',
		function($scope,  $indexedDB) {

	
	$scope.entidade = "Eventos";
	
	/**
	* @type {ObjectStore}
	*/
	var eventosObjectStore = $indexedDB.objectStore(OBJECT_STORE_EVENTOS);
	
  function buscaEventos() {
      eventosObjectStore.getAll().then(function(eventosList) {  
           $scope.listView = eventosList;        
      });		
  }
	
	$scope.setMaster = function(section) {
	    $scope.selected = section;
	};
	
	$scope.isSelected = function(section) {
	    return $scope.selected === section;
	};
		
	$scope.removeEvento = function(key) {
		eventosObjectStore.delete(key).then(function() {			
			buscaEventos();
		});
	};
	
	if($indexedDB.onDatabaseError) {
		$location.path('/unsupported');
	} else {	
		buscaEventos();
	}
			
}]);

imoveisDbControllers.controller('EventosEditCtrl', ['$scope', '$log', '$rootScope', '$routeParams', '$location',  '$indexedDB', '$filter',
    function($scope, $log, $rootScope, $routeParams, $location, $indexedDB, $filter) {
      
    if ($rootScope == "view") {$scope.entidade = "Alterar evento";}
    else {$scope.entidade = "Incluir evento";}
      
    /**
    * @type {ObjectStore}
    */
    var eventosObjectStore = $indexedDB.objectStore(OBJECT_STORE_EVENTOS);    
    var contratosObjectStore = $indexedDB.objectStore(OBJECT_STORE_CONTRATOS);    
    var clientesObjectStore = $indexedDB.objectStore(OBJECT_STORE_CLIENTES);    
    var imoveisObjectStore = $indexedDB.objectStore(OBJECT_STORE_IMOVEIS);
    
    $scope.novoevento = {};
    $scope.relacao = {};
    $scope.novoevento.relacionados = [];
    $scope.itemsList = [];
    
    //$scope.relacao = {};
    $scope.tiposEvento = [ "boleto","contrato", "renovacao", "pagamento"];
    $scope.tiposRelacao = ["cliente","imovel","contrato"];
    $scope.tiposSituacao = ["ativo","avencer","vencido","liquidado"];
    $scope.novoevento.situacao = "ativo";
    
    $scope.today= function() {
        $scope.dt = new Date();
    };
    
    $scope.today();

    $scope.clear = function () {
        $scope.dt = null;
    };

    $scope.dateOptions = {
        formatDay: 'dd',
        formatMonth: 'MM',
        formatYear: 'yyyy',
        startingDay: 1
    };
    
    $scope.incluirRelacionado = function(){
        if ($scope.relacao.relacionado !== ''){
            $scope.novoevento.relacionados.push($scope.relacao);
            $scope.relacao = {};
        }
    };
    
    $scope.removeRelacao = function(index){
        $scope.novoevento.relacionados.splice(index, 1);
    };
    
    $scope.buscarRelacoes = function(escolha){
      
      switch (escolha){
          case "cliente":
            clientesObjectStore.getAll().then(function(itemsList) {
              $scope.itemsList = itemsList;
            });		
            break;
          case "imovel":
            imoveisObjectStore.getAll().then(function(itemsList) {
              $scope.itemsList = itemsList;
            });		
            break;
          case "contrato":
            contratosObjectStore.getAll().then(function(itemsList) {
              $scope.itemsList = itemsList;
            });		
            break;
          default:
            return;
      }
      
    };
    
    $scope.cancel = function() {
        
    };
  
    $scope.submit = function() {
        
        $scope.novoevento.updated = new Date();
        
        var dtAvencer = new Date();
        dtAvencer.setDate(dtAvencer + 7);
        
        if ($scope.picker < $scope.novoevento.updated) {
          $scope.novoevento.situacao = "vencido";
        }
        else if ($scope.picker < dtAvencer) {
          $scope.novoevento.situacao = "avencer";
        }
        else {
          $scope.novoevento.situacao = "ativo";
        }
        
        $scope.novoevento.dataInicio = $filter('dateFormat')($scope.novoevento.updated, true);
        $scope.novoevento.dataVencimento = $filter('dateFormat')($scope.picker, true);
        
        //alert($filter('json')($scope.novoevento));
        
        eventosObjectStore
          .upsert($scope.novoevento)
              .then(function(e){
                   $log.info('Evento' + $scope.novoevento.id + 'incluído com vencimento em:'+  $scope.novoevento.dataVencimento +  ' at:' + new Date());
                   $location.path('/cadastro/eventos').replace();
        });
      
    };
  
    function buscaInfo(key) {
      
      if(key) {
        var myQuery = $indexedDB.queryBuilder().$eq(key).$asc().compile();
        clientesObjectStore.each(
          function(cliente){
            $scope.cpf = cliente.value.cpf;
            //if (_.contains(cliente.value.tipo,"Eventos")) $scope.locador.active
            $scope.locatario = _.contains(cliente.value.tipo,"Locatario");
            $scope.dono = _.contains(cliente.value.tipo,"Dono");
            $scope.fiador = _.contains(cliente.value.tipo,"Fiador");
            $scope.nome = cliente.value.nome;
            $scope.email = cliente.value.email;
            //$scope.telefones = _.(cliente.value.telefones))
            $scope.enderecos = cliente.value.enderecos;
            //$scope.locadorSelected=true;
            //$location.path('#/locadores/edit/'+key);
          }
        ,myQuery);
      }
    }
    
    if($indexedDB.onDatabaseError) {
      $location.path('/unsupported');
    } else {
      buscaInfo($routeParams.id);
    }
}]);


imoveisDbControllers.controller('CalendarCtrl', ['$scope', '$indexedDB',
		function($scope,  $indexedDB) {
		  
	$scope.entidade = "Calendário";
	
	/**
	* @type {ObjectStore}
	*/
	var eventosObjectStore = $indexedDB.objectStore(OBJECT_STORE_EVENTOS);
		
	$scope.events = [];
	
	function buscaEventos() {
      eventosObjectStore.getAll().then(function(eventosList) {          
					angular.forEach(eventosList, function(value, key){					    
              this.push({
                  title: value.relacionados[0].relacionado + ": " + value.titulo,
                  start: value.dataVencimento // will be parsed
              });
					}, $scope.events);
      });		
  }	
  
  if($indexedDB.onDatabaseError) {
    $location.path('/unsupported');
  } else {
     buscaEventos();
  }
					
}]);

 
function CalendarModuleCtrl($scope,$compile,uiCalendarConfig) {
    			
	var date = new Date();
  var d = date.getDate();
  var m = date.getMonth();
  var y = date.getFullYear();
    
  $scope.changeTo = 'Portuguese';
  $scope.eventos = [];
    
  $scope.calEventsExt = {
       color: '#f00',
       textColor: 'yellow',
       events: [ 
          {type:'party',title: 'Lunch',start: new Date(y, m, d, 12, 0),end: new Date(y, m, d, 14, 0),allDay: false},
          {type:'party',title: 'Lunch 2',start: new Date(y, m, d, 12, 0),end: new Date(y, m, d, 14, 0),allDay: false},
          {type:'party',title: 'Click for Google',start: new Date(y, m, 28),end: new Date(y, m, 29),url: 'http://google.com/'}
        ]
    };
    /* alert on eventClick */
    $scope.alertOnEventClick = function( date, jsEvent, view){
        $scope.alertMessage = (date.title + ' was clicked ');
    };
    /* alert on Drop */
     $scope.alertOnDrop = function(event, delta, revertFunc, jsEvent, ui, view){
       $scope.alertMessage = ('Event Droped to make dayDelta ' + delta);
    };
    /* alert on Resize */
    $scope.alertOnResize = function(event, delta, revertFunc, jsEvent, ui, view ){
       $scope.alertMessage = ('Event Resized to make dayDelta ' + delta);
    };
    /* add and removes an event source of choice */
    $scope.addRemoveEventSource = function(sources,source) {
      var canAdd = 0;
      angular.forEach(sources,function(value, key){
        if(sources[key] === source){
          sources.splice(key,1);
          canAdd = 1;
        }
      });
      if(canAdd === 0){
        sources.push(source);
      }
    };
    /* add custom event*/
    $scope.addEvent = function() {
      $scope.events.push({
        title: 'Open Sesame',
        start: new Date(y, m, 28),
        end: new Date(y, m, 29),
        className: ['openSesame']
      });
    };
    /* remove event */
    $scope.remove = function(index) {
      $scope.eventos.splice(index,1);		
    };
    /* Change View */
    $scope.changeView = function(view,calendar) {
      uiCalendarConfig.calendars[calendar].fullCalendar('changeView',view);
    };
    /* Change View */
    $scope.renderCalender = function(calendar) {
      if(uiCalendarConfig.calendars[calendar]){
        uiCalendarConfig.calendars[calendar].fullCalendar('render');
      }
    };
     /* Render Tooltip */
    $scope.eventRender = function( event, element, view ) { 
        element.attr({'tooltip': event.title,
                     'tooltip-append-to-body': true});
        $compile(element)($scope);
    };
    /* config object */
    $scope.uiConfig = {
      calendar:{
        height: 450,
        editable: true,
        header:{
          left: 'prev,next today',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        eventClick: $scope.alertOnEventClick,
        eventDrop: $scope.alertOnDrop,
        eventResize: $scope.alertOnResize,
        eventRender: $scope.eventRender
      }
    };

    $scope.changeLang = function() {
      if($scope.changeTo === 'Portuguese'){
        $scope.uiConfig.calendar.dayNames = ["Domingo", "Segunda-Feira", "Terça-Feira", "Quarta-Feira", "Quinta-Feira", "Sexta-Feira", "Sábado"];
        $scope.uiConfig.calendar.dayNamesShort = ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"];
        $scope.changeTo= 'English';
      } else {
        $scope.uiConfig.calendar.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        $scope.uiConfig.calendar.dayNamesShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        $scope.changeTo = 'Portuguese';
      }
    };
    /* event sources array*/
    $scope.eventSources = [$scope.events, $scope.eventos];
    
} 
/* EOF */


